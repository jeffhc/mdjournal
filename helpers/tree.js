

/*

      Javascript Object Tree helper file.
      Builds objects trees from file/folder paths.

*/




// Takes an array of arrays (an array of split paths):
//    EG: [ ['folder', 'folder', 'file'], ['folder', 'file'] ]
// This reduction method was borrowed from:
//    https://stackoverflow.com/questions/57344694/create-a-tree-from-a-list-of-strings-containing-paths-of-files-javascript
let pathsReducer = function(paths) {
  let result = [];
  let level = {result, count: 0};

  paths.forEach(path => {
    path.reduce((r, name, i, a) => {
      // console.log(level);
      if(!r[name]) {
        r[name] = {result: [], count: 0};
        r.result.push({name, children: r[name].result })
      }
      r.count = r.result.length;
      
      return r[name];
    }, level)
  })

  return level
}

// Takes a tree structure as generated by pathsReducer, and parses it.
let treeFromReduced = function(name, obj) {
  let result_obj = { name, children: [], count: 0 }
  if(obj['result'] && obj['result'].length) {
    result_obj['count'] = obj['count'];
    result_obj['children'] = [];
    for(var key of Object.keys(obj)) {
      if(key != 'count' && key != 'result') {
        if(obj[key]['result'] && obj[key]['result'].length) {
          result_obj['children'].push(treeFromReduced(key, obj[key]));  
        }
        else {
          result_obj['children'].push({ name: key, count: 0 });
        }
      }
    }
  }
  return result_obj;
}

// Takes a tree from treeFromReduced and parses it for Bootstrap Treeview (google it if you don't know)
let parseForBootStrapTreeView = function(treeObj, pathNameDictionary) {
  let result_obj = { 
    text: pathNameDictionary[treeObj['name']],
    id: treeObj['name'],
    icon: "fa fa-folder",
    selectedIcon: "fa fa-folder",
    color: "#000000",
    backColor: "#FFFFFF",
    tags_count: treeObj['count'],
    href: treeObj['name'],
  }
  if(treeObj['children'] && treeObj['children'].length) {
    result_obj['nodes'] = [];
    for(var child of treeObj['children']) {
      result_obj['nodes'].push(parseForBootStrapTreeView(child, pathNameDictionary));
    }
  }
  return result_obj;
}

// Borrowed from: https://stackoverflow.com/questions/42171899/create-list-array-from-javascript-tree-object
// tree should be an array
let getAllInstancesOfKeyFromTree = function (tree, key) {
  return tree.reduce(function(acc, o) {
      if(o[key])                              // if this object has an href
          acc.push(o[key]);                   // add the href to the result array
      if(o.nodes)                             // if this object has children
          acc = acc.concat(convert(o.nodes)); // get their href and add (concat) them to the result
      return acc;
  }, []);
}


let getParsedTreeFromPaths = function(paths, pathNameDictionary) {
  return parseForBootStrapTreeView( treeFromReduced( 'base', pathsReducer(paths) ), pathNameDictionary );
}

module.exports = {
  getParsedTreeFromPaths
}